1)	Communitcating with hardware devices (RAM, PCIE, SATA, etc.),
	multitasking (CPU scheduling), etc. [managing system 
	resources.]

2)	[x] A signal to pause the current running process and to resume or
	kill it (depends on the context) once the interrupt has been 
	acknowledges and processed. [an event that alters the sequence
	of intstructions executed by a processor.]

3)	A software interrupt generated by the current process to get
	attention of the kernel.

4)	A procedure that handles an interruptâ€”interrupt service 
	routine.

5)	Interrupt Descriptor Table (IDT) contains the address of an
	ISR and additional information such as privlege requirements.
	[the additional information is known as gate information.]

6)	Offset = (interrupt no.) * 16

7)	[x] `iret` is used to return control flow to a process after an
	interrupt; `ret` returns control to the calling procedure 
	within a process. [`iret` restores $rip and $rFlags, `ret` only
	restores $rip.]

8)	[x] To perform security checks such as privilege escalations and
	enable multiprocessing via scheduling. [ISRs change depending
	on various things like hardware configuration, so the OS must
	choose the proper interrupt when required.]

9)	An interrupt whose invocation is unpredictable and may occur on
	any instruction in a procedure.

10)	An interrupt whose invocation is predictable and often desired
	by a programmer at a specific location.

11)	If an interrupt occurs in the middle of a condition check, the
	rFlags must be saved from that check to make sure the process
	can resume without losing continuity.

12)	(1) Disk data ready to read, (2) page fault.

13)	[x] Accessing a region of memory stored on disk and requires
	loading (page fault.) [division by 0.]

14)	Maskable interrupts may be handled at a later time, while
	unmaskable interrupts demand handling immediately.
